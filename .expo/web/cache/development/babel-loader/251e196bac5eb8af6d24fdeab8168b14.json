{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Projetos\\\\Android\\\\ReactNative\\\\educred\\\\src\\\\navegacao\\\\AuthProvider.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState } from 'react';\nimport auth from '@react-native-firebase/auth';\nimport firebase from \"../config/firebaseconfig\";\nimport * as Google from 'expo-google-app-auth';\nexport var AuthContext = createContext();\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children,\n      navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorLogin = _useState4[0],\n      setErrorLogin = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorCadastrar = _useState6[0],\n      setErrorCadastrar = _useState6[1];\n\n  var database = firebase.firestore();\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser,\n      loginFirebaseTutor: function loginFirebaseTutor(email, password) {\n        return _regeneratorRuntime.async(function loginFirebaseTutor$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password).then(function (userCredential) {\n                  var usuario = userCredential.user;\n                  navigation.navigate(\"Inicial Tutor\", {\n                    idTutor: usuario.uid\n                  });\n                  console.log(usuario.uid + \" + Login Tutor carregando lista de jogadores\");\n                }).catch(function (error) {\n                  setErrorLogin(true);\n                  var errorCode = error.code;\n                  var errorMessage = error.message;\n                }));\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      isUserEqualTutor: function isUserEqualTutor(googleUser, firebaseUser) {\n        if (firebaseUser) {\n          var providerData = firebaseUser.providerData;\n\n          for (var i = 0; i < providerData.length; i++) {\n            if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      },\n      onSignInTutor: function onSignInTutor(googleUser) {\n        console.log('Google Auth Response', googleUser);\n        var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n          unsubscribe();\n\n          if (!isUserEqualTutor(googleUser, firebaseUser)) {\n            var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n            firebase.auth().signInWithCredential(credential).then(function () {\n              console.log('Tutor Logado!');\n            }).catch(function (error) {\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              var email = error.email;\n              var credential = error.credential;\n            });\n          } else {\n            console.log('Tutor jÃ¡ cadastrado no Firebase.');\n          }\n        });\n      },\n      signInWithGoogleAsyncTutor: function signInWithGoogleAsyncTutor() {\n        var result;\n        return _regeneratorRuntime.async(function signInWithGoogleAsyncTutor$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(Google.logInAsync({\n                  androidClientId: '170621206655-u81n4jfbukkgh95b6q3nv00plqvn6tn1.apps.googleusercontent.com',\n                  scopes: ['profile', 'email']\n                }));\n\n              case 3:\n                result = _context2.sent;\n\n                if (!(result.type === 'success')) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                onSignInTutor(result);\n                return _context2.abrupt(\"return\", result.accessToken);\n\n              case 9:\n                return _context2.abrupt(\"return\", {\n                  cancelled: true\n                });\n\n              case 10:\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  error: true\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[0, 12]], Promise);\n      },\n      cadastrarTutor: function cadastrarTutor(email, password, tutorNome) {\n        return _regeneratorRuntime.async(function cadastrarTutor$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n                  var idTutor = userCredential.user.uid;\n                  var nivelAcesso = '2';\n                  var descricaoAcesso = 'Tutor';\n                  var emailTutor = userCredential.user.email;\n                  var nomeTutor = tutorNome;\n                  database.collection(\"tutor\").doc(firebase.auth().currentUser.uid).set({\n                    idTutor: idTutor,\n                    nivelAcesso: nivelAcesso,\n                    descricaoAcesso: descricaoAcesso,\n                    emailTutor: emailTutor,\n                    nomeTutor: nomeTutor\n                  });\n                  console.log(idTutor + \" \" + nivelAcesso + \" \" + descricaoAcesso + \"-\" + \"AuthProvider\");\n                }).catch(function (error) {\n                  var errorCode = error.code;\n                  var errorMessage = error.message;\n                }));\n\n              case 3:\n                _context3.next = 8;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      loginFirebaseJogador: function loginFirebaseJogador(email, password) {\n        return _regeneratorRuntime.async(function loginFirebaseJogador$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password).then(function (userCredential) {\n                  var usuario = userCredential.user;\n                  navigation.navigate(\"Inicial Jogador\", {\n                    idJogador: usuario.uid\n                  });\n                  console.log(usuario.uid + \" + Login Jogador - AuthProvider\");\n                }).catch(function (error) {\n                  setErrorLogin(true);\n                  var errorCode = error.code;\n                  var errorMessage = error.message;\n                }));\n\n              case 3:\n                _context4.next = 8;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      isUserEqualJogador: function isUserEqualJogador(googleUser, firebaseUser) {\n        if (firebaseUser) {\n          var providerData = firebaseUser.providerData;\n\n          for (var i = 0; i < providerData.length; i++) {\n            if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      },\n      onSignInJogador: function onSignInJogador(googleUser) {\n        console.log('Google Auth Response', googleUser);\n        var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n          unsubscribe();\n\n          if (!isUserEqualJogador(googleUser, firebaseUser)) {\n            var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n            firebase.auth().signInWithCredential(credential).then(function () {\n              console.log('Jogador Logado!');\n            }).catch(function (error) {\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              var email = error.email;\n              var credential = error.credential;\n            });\n          } else {\n            console.log('Jogador jÃ¡ cadastrado no Firebase.');\n          }\n        });\n      },\n      signInWithGoogleAsyncJogador: function signInWithGoogleAsyncJogador() {\n        var result;\n        return _regeneratorRuntime.async(function signInWithGoogleAsyncJogador$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return _regeneratorRuntime.awrap(Google.logInAsync({\n                  androidClientId: '170621206655-u81n4jfbukkgh95b6q3nv00plqvn6tn1.apps.googleusercontent.com',\n                  scopes: ['profile', 'email']\n                }));\n\n              case 3:\n                result = _context5.sent;\n\n                if (!(result.type === 'success')) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                onSignInJogador(result);\n                return _context5.abrupt(\"return\", result.accessToken);\n\n              case 9:\n                return _context5.abrupt(\"return\", {\n                  cancelled: true\n                });\n\n              case 10:\n                _context5.next = 15;\n                break;\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  error: true\n                });\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, [[0, 12]], Promise);\n      },\n      cadastrarJogador: function cadastrarJogador(email, password, jogadorNome) {\n        return _regeneratorRuntime.async(function cadastrarJogador$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n                  var idTutor = '';\n                  var idJogador = userCredential.user.uid;\n                  var nivelAcesso = '2';\n                  var descricaoAcesso = 'Jogador';\n                  var emailJogador = userCredential.user.email;\n                  var nomeJogador = jogadorNome;\n                  database.collection(\"jogador\").doc(firebase.auth().currentUser.uid).set({\n                    idTutor: idTutor,\n                    idJogador: idJogador,\n                    nivelAcesso: nivelAcesso,\n                    descricaoAcesso: descricaoAcesso,\n                    emailJogador: emailJogador,\n                    nomeJogador: nomeJogador\n                  });\n                  console.log(idJogador + \" \" + nivelAcesso + \" \" + descricaoAcesso + \"-\" + \"AuthProvider\");\n                }).catch(function (error) {\n                  var errorCode = error.code;\n                  var errorMessage = error.message;\n                }));\n\n              case 3:\n                _context6.next = 8;\n                break;\n\n              case 5:\n                _context6.prev = 5;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      logout: function logout() {\n        return _regeneratorRuntime.async(function logout$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().signOut());\n\n              case 3:\n                _context7.next = 8;\n                break;\n\n              case 5:\n                _context7.prev = 5;\n                _context7.t0 = _context7[\"catch\"](0);\n                console.log(_context7.t0);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["F:/Projetos/Android/ReactNative/educred/src/navegacao/AuthProvider.js"],"names":["React","createContext","useState","auth","firebase","Google","AuthContext","AuthProvider","children","navigation","user","setUser","errorLogin","setErrorLogin","errorCadastrar","setErrorCadastrar","database","firestore","loginFirebaseTutor","email","password","signInWithEmailAndPassword","then","userCredential","usuario","navigate","idTutor","uid","console","log","catch","error","errorCode","code","errorMessage","message","isUserEqualTutor","googleUser","firebaseUser","providerData","i","length","providerId","GoogleAuthProvider","PROVIDER_ID","getBasicProfile","getId","onSignInTutor","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","signInWithGoogleAsyncTutor","logInAsync","androidClientId","scopes","result","type","cancelled","cadastrarTutor","tutorNome","createUserWithEmailAndPassword","nivelAcesso","descricaoAcesso","emailTutor","nomeTutor","collection","doc","currentUser","set","loginFirebaseJogador","idJogador","isUserEqualJogador","onSignInJogador","signInWithGoogleAsyncJogador","cadastrarJogador","jogadorNome","emailJogador","nomeJogador","logout","signOut"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from 'react';\r\nimport auth from '@react-native-firebase/auth';\r\n\r\nimport firebase from \"../config/firebaseconfig\";\r\n\r\nimport * as Google from 'expo-google-app-auth';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({children, navigation}) => {\r\n  const [user, setUser] = useState(null);\r\n  const [errorLogin, setErrorLogin] = useState(\"\")\r\n  const [errorCadastrar, setErrorCadastrar] = useState(\"\"); \r\n\r\n  const database = firebase.firestore()\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        loginFirebaseTutor: async (email, password) => {\r\n          try {\r\n            await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                let usuario = userCredential.user;\r\n                navigation.navigate(\"Inicial Tutor\", { idTutor: usuario.uid})\r\n                console.log(usuario.uid + \" + Login Tutor carregando lista de jogadores\");\r\n                // ...\r\n            })\r\n            .catch((error) => {\r\n                setErrorLogin(true)\r\n                let errorCode = error.code;\r\n                let errorMessage = error.message;\r\n            });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }          \r\n        },\r\n\r\n        isUserEqualTutor: (googleUser, firebaseUser) => {\r\n            if (firebaseUser) {\r\n              var providerData = firebaseUser.providerData;\r\n              for (var i = 0; i < providerData.length; i++) {\r\n                if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n                    providerData[i].uid === googleUser.getBasicProfile().getId()) {\r\n                  // We don't need to reauth the Firebase connection.\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n        },\r\n    \r\n        onSignInTutor: googleUser => {\r\n            console.log('Google Auth Response', googleUser);\r\n            // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n            var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n              unsubscribe();\r\n              // Check if we are already signed-in Firebase with the correct user.\r\n              if (!isUserEqualTutor(googleUser, firebaseUser)) {\r\n                // Build Firebase credential with the Google ID token.\r\n                var credential = firebase.auth.GoogleAuthProvider.credential(\r\n                    googleUser.idToken,\r\n                    googleUser.accessToken\r\n                );      \r\n                // Sign in with credential from the Google user.\r\n                firebase\r\n                .auth()\r\n                .signInWithCredential(credential).then(function (){\r\n                    console.log('Tutor Logado!');\r\n                })\r\n                .catch((error) => {\r\n                  // Handle Errors here.\r\n                  var errorCode = error.code;\r\n                  var errorMessage = error.message;\r\n                  // The email of the user's account used.\r\n                  var email = error.email;\r\n                  // The firebase.auth.AuthCredential type that was used.\r\n                  var credential = error.credential;\r\n                  // ...\r\n                });\r\n              } else {\r\n                console.log('Tutor jÃ¡ cadastrado no Firebase.');\r\n              }\r\n            });\r\n        },        \r\n        signInWithGoogleAsyncTutor: async () => {\r\n            try {\r\n              const result = await Google.logInAsync({\r\n                androidClientId: '170621206655-u81n4jfbukkgh95b6q3nv00plqvn6tn1.apps.googleusercontent.com',\r\n                //iosClientId: YOUR_CLIENT_ID_HERE,\r\n                scopes: ['profile', 'email'],\r\n              });\r\n          \r\n              if (result.type === 'success') {\r\n                onSignInTutor(result);\r\n                return result.accessToken;\r\n              } else {\r\n                return { cancelled: true };\r\n              }\r\n            } catch (e) {\r\n              return { error: true };\r\n            }\r\n        },\r\n        cadastrarTutor: async (email, password, tutorNome) => {\r\n          try {\r\n            await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n              .then((userCredential) => {\r\n\r\n                  let idTutor = userCredential.user.uid;\r\n                  let nivelAcesso = '2';\r\n                  let descricaoAcesso = 'Tutor';\r\n                  let emailTutor = userCredential.user.email;\r\n                  let nomeTutor = tutorNome;\r\n\r\n                  database.collection(\"tutor\")\r\n                      .doc(firebase.auth().currentUser.uid)\r\n                      .set({\r\n                          idTutor,\r\n                          nivelAcesso,\r\n                          descricaoAcesso,\r\n                          emailTutor,\r\n                          nomeTutor\r\n                      })\r\n\r\n                      console.log(idTutor + \" \" + nivelAcesso + \" \" + descricaoAcesso + \"-\" + \"AuthProvider\");\r\n\r\n              })\r\n              .catch((error) => {\r\n                  let errorCode = error.code;\r\n                  let errorMessage = error.message;\r\n                  // ..\r\n              });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        },\r\n        loginFirebaseJogador: async (email, password) => {\r\n          try {\r\n            await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                let usuario = userCredential.user;\r\n                navigation.navigate(\"Inicial Jogador\", { idJogador: usuario.uid})\r\n                console.log(usuario.uid + \" + Login Jogador - AuthProvider\");\r\n                // ...\r\n            })\r\n            .catch((error) => {\r\n                setErrorLogin(true)\r\n                let errorCode = error.code;\r\n                let errorMessage = error.message;\r\n            });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }          \r\n        },\r\n\r\n        isUserEqualJogador: (googleUser, firebaseUser) => {\r\n            if (firebaseUser) {\r\n              var providerData = firebaseUser.providerData;\r\n              for (var i = 0; i < providerData.length; i++) {\r\n                if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n                    providerData[i].uid === googleUser.getBasicProfile().getId()) {\r\n                  // We don't need to reauth the Firebase connection.\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n        },\r\n    \r\n        onSignInJogador: googleUser => {\r\n            console.log('Google Auth Response', googleUser);\r\n            // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n            var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n              unsubscribe();\r\n              // Check if we are already signed-in Firebase with the correct user.\r\n              if (!isUserEqualJogador(googleUser, firebaseUser)) {\r\n                // Build Firebase credential with the Google ID token.\r\n                var credential = firebase.auth.GoogleAuthProvider.credential(\r\n                    googleUser.idToken,\r\n                    googleUser.accessToken\r\n                );      \r\n                // Sign in with credential from the Google user.\r\n                firebase\r\n                .auth()\r\n                .signInWithCredential(credential).then(function (){\r\n                    console.log('Jogador Logado!');\r\n                })\r\n                .catch((error) => {\r\n                  // Handle Errors here.\r\n                  var errorCode = error.code;\r\n                  var errorMessage = error.message;\r\n                  // The email of the user's account used.\r\n                  var email = error.email;\r\n                  // The firebase.auth.AuthCredential type that was used.\r\n                  var credential = error.credential;\r\n                  // ...\r\n                });\r\n              } else {\r\n                console.log('Jogador jÃ¡ cadastrado no Firebase.');\r\n              }\r\n            });\r\n        },        \r\n        signInWithGoogleAsyncJogador: async () => {\r\n            try {\r\n              const result = await Google.logInAsync({\r\n                androidClientId: '170621206655-u81n4jfbukkgh95b6q3nv00plqvn6tn1.apps.googleusercontent.com',\r\n                //iosClientId: YOUR_CLIENT_ID_HERE,\r\n                scopes: ['profile', 'email'],\r\n              });\r\n          \r\n              if (result.type === 'success') {\r\n                onSignInJogador(result);\r\n                return result.accessToken;\r\n              } else {\r\n                return { cancelled: true };\r\n              }\r\n            } catch (e) {\r\n              return { error: true };\r\n            }\r\n        },\r\n        cadastrarJogador: async (email, password, jogadorNome) => {\r\n          try {\r\n            await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n              .then((userCredential) => {\r\n                  let idTutor = '';\r\n                  let idJogador = userCredential.user.uid;\r\n                  let nivelAcesso = '2';\r\n                  let descricaoAcesso = 'Jogador';\r\n                  let emailJogador = userCredential.user.email;\r\n                  let nomeJogador = jogadorNome;\r\n\r\n                  database.collection(\"jogador\")\r\n                      .doc(firebase.auth().currentUser.uid)\r\n                      .set({\r\n                          idTutor,\r\n                          idJogador,\r\n                          nivelAcesso,\r\n                          descricaoAcesso,\r\n                          emailJogador,\r\n                          nomeJogador\r\n                      })\r\n\r\n                      console.log(idJogador + \" \" + nivelAcesso + \" \" + descricaoAcesso + \"-\" + \"AuthProvider\");\r\n\r\n              })\r\n              .catch((error) => {\r\n                  let errorCode = error.code;\r\n                  let errorMessage = error.message;\r\n                  // ..\r\n              });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        },\r\n        logout: async () => {\r\n          try {\r\n            await firebase.auth().signOut();\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        },\r\n      }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}